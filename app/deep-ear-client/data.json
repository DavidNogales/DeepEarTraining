{
   "py/object":"pyvis.network.Network",
   "nodes":"[{'size': 14, 'group': '0', 'id': 'I', 'label': 'I', 'shape': 'dot', 'font': {'color': '#811a48'}}, {'size': 15, 'group': '0', 'id': 'V', 'label': 'V', 'shape': 'dot', 'font': {'color': '#811a48'}}, {'size': 14, 'group': '0', 'id': 'ii', 'label': 'ii', 'shape': 'dot', 'font': {'color': '#811a48'}}, {'size': 13, 'group': '0', 'id': 'vi', 'label': 'vi', 'shape': 'dot', 'font': {'color': '#811a48'}}, {'size': 14, 'group': '1', 'id': 'II', 'label': 'II', 'shape': 'dot', 'font': {'color': '#811a48'}}, {'size': 15, 'group': '0', 'id': 'IV', 'label': 'IV', 'shape': 'dot', 'font': {'color': '#811a48'}}, {'size': 14, 'group': '1', 'id': 'VII', 'label': 'VII', 'shape': 'dot', 'font': {'color': '#811a48'}}, {'size': 13, 'group': '1', 'id': 'v', 'label': 'v', 'shape': 'dot', 'font': {'color': '#811a48'}}, {'size': 14, 'group': '1', 'id': 'III', 'label': 'III', 'shape': 'dot', 'font': {'color': '#811a48'}}, {'size': 14, 'group': '1', 'id': 'VI', 'label': 'VI', 'shape': 'dot', 'font': {'color': '#811a48'}}, {'size': 11, 'group': '1', 'id': 'iv', 'label': 'iv', 'shape': 'dot', 'font': {'color': '#811a48'}}, {'size': 10, 'group': '0', 'id': 'iii', 'label': 'iii', 'shape': 'dot', 'font': {'color': '#811a48'}}, {'size': 12, 'group': '1', 'id': 'i', 'label': 'i', 'shape': 'dot', 'font': {'color': '#811a48'}}, {'size': 7, 'group': '0', 'id': 'vii', 'label': 'vii', 'shape': 'dot', 'font': {'color': '#811a48'}}]",
   "edges":"[{'width': 25.0, 'from': 'I', 'to': 'V'}, {'width': 0.5921589980942009, 'from': 'I', 'to': 'ii'}, {'width': 13.054723659134224, 'from': 'I', 'to': 'I'}, {'width': 2.266539613395045, 'from': 'I', 'to': 'vi'}, {'width': 0.04083855159270351, 'from': 'I', 'to': 'II'}, {'width': 8.35829022597332, 'from': 'I', 'to': 'IV'}, {'width': 0.5989654233596515, 'from': 'I', 'to': 'VII'}, {'width': 0.054451402123604685, 'from': 'I', 'to': 'v'}, {'width': 0.04083855159270351, 'from': 'I', 'to': 'III'}, {'width': 0.020419275796351756, 'from': 'I', 'to': 'VI'}, {'width': 0.04083855159270351, 'from': 'I', 'to': 'iv'}, {'width': 0.03403212632725292, 'from': 'I', 'to': 'iii'}, {'width': 0.013612850530901171, 'from': 'I', 'to': 'i'}, {'width': 0.5377075959705963, 'from': 'V', 'to': 'ii'}, {'width': 0.061257827389055275, 'from': 'V', 'to': 'iii'}, {'width': 1.0754151919411925, 'from': 'V', 'to': 'II'}, {'width': 4.478627824666486, 'from': 'V', 'to': 'IV'}, {'width': 1.0345766403484888, 'from': 'V', 'to': 'i'}, {'width': 0.03403212632725292, 'from': 'V', 'to': 'iv'}, {'width': 3.7231146202014704, 'from': 'V', 'to': 'V'}, {'width': 1.3000272257010619, 'from': 'V', 'to': 'vi'}, {'width': 0.047644976858154095, 'from': 'V', 'to': 'III'}, {'width': 0.1837734821671658, 'from': 'V', 'to': 'VII'}, {'width': 0.08167710318540702, 'from': 'V', 'to': 'VI'}, {'width': 0.006806425265450586, 'from': 'V', 'to': 'v'}, {'width': 0.006806425265450586, 'from': 'V', 'to': 'vii'}, {'width': 0.29948271167982576, 'from': 'ii', 'to': 'vi'}, {'width': 0.1293220800435611, 'from': 'ii', 'to': 'IV'}, {'width': 0.15654778110536346, 'from': 'ii', 'to': 'II'}, {'width': 0.6806425265450585, 'from': 'ii', 'to': 'ii'}, {'width': 0.04083855159270351, 'from': 'ii', 'to': 'v'}, {'width': 0.020419275796351756, 'from': 'ii', 'to': 'VI'}, {'width': 0.020419275796351756, 'from': 'ii', 'to': 'III'}, {'width': 0.013612850530901171, 'from': 'ii', 'to': 'iii'}, {'width': 0.013612850530901171, 'from': 'ii', 'to': 'VII'}, {'width': 0.013612850530901171, 'from': 'ii', 'to': 'i'}, {'width': 0.006806425265450586, 'from': 'ii', 'to': 'vii'}, {'width': 0.34032126327252926, 'from': 'iii', 'to': 'vi'}, {'width': 0.006806425265450586, 'from': 'iii', 'to': 'IV'}, {'width': 0.020419275796351756, 'from': 'iii', 'to': 'II'}, {'width': 0.013612850530901171, 'from': 'iii', 'to': 'VII'}, {'width': 0.020419275796351756, 'from': 'iii', 'to': 'VI'}, {'width': 0.006806425265450586, 'from': 'iii', 'to': 'III'}, {'width': 0.006806425265450586, 'from': 'iii', 'to': 'vii'}, {'width': 0.04083855159270351, 'from': 'vi', 'to': 'II'}, {'width': 0.5649332970323986, 'from': 'vi', 'to': 'III'}, {'width': 0.46964334331609037, 'from': 'vi', 'to': 'vi'}, {'width': 0.3335148380070787, 'from': 'vi', 'to': 'IV'}, {'width': 0.020419275796351756, 'from': 'vi', 'to': 'VI'}, {'width': 0.027225701061802342, 'from': 'vi', 'to': 'iv'}, {'width': 0.020419275796351756, 'from': 'vi', 'to': 'VII'}, {'width': 0.006806425265450586, 'from': 'vi', 'to': 'v'}, {'width': 0.013612850530901171, 'from': 'II', 'to': 'iv'}, {'width': 0.04083855159270351, 'from': 'II', 'to': 'v'}, {'width': 0.2654505853525728, 'from': 'II', 'to': 'II'}, {'width': 0.047644976858154095, 'from': 'II', 'to': 'i'}, {'width': 0.013612850530901171, 'from': 'II', 'to': 'IV'}, {'width': 0.047644976858154095, 'from': 'II', 'to': 'VI'}, {'width': 0.013612850530901171, 'from': 'II', 'to': 'III'}, {'width': 0.006806425265450586, 'from': 'II', 'to': 'vii'}, {'width': 0.5036754696433433, 'from': 'IV', 'to': 'VII'}, {'width': 1.0277702150830383, 'from': 'IV', 'to': 'IV'}, {'width': 0.10209637898175877, 'from': 'IV', 'to': 'III'}, {'width': 0.08848352845085762, 'from': 'IV', 'to': 'v'}, {'width': 0.006806425265450586, 'from': 'IV', 'to': 'VI'}, {'width': 0.03403212632725292, 'from': 'IV', 'to': 'i'}, {'width': 0.006806425265450586, 'from': 'IV', 'to': 'iv'}, {'width': 0.006806425265450586, 'from': 'IV', 'to': 'vii'}, {'width': 0.19738633269806696, 'from': 'i', 'to': 'iv'}, {'width': 1.4838007078682276, 'from': 'i', 'to': 'i'}, {'width': 1.1707051456575006, 'from': 'i', 'to': 'VII'}, {'width': 0.11570922951265995, 'from': 'i', 'to': 'III'}, {'width': 0.4288047917233868, 'from': 'i', 'to': 'v'}, {'width': 0.020419275796351756, 'from': 'i', 'to': 'VI'}, {'width': 0.07487067791995644, 'from': 'iv', 'to': 'VII'}, {'width': 0.006806425265450586, 'from': 'iv', 'to': 'VI'}, {'width': 0.006806425265450586, 'from': 'iv', 'to': 'v'}, {'width': 0.054451402123604685, 'from': 'iv', 'to': 'III'}, {'width': 0.006806425265450586, 'from': 'iv', 'to': 'vii'}, {'width': 0.6193846991560032, 'from': 'VII', 'to': 'III'}, {'width': 0.07487067791995644, 'from': 'VII', 'to': 'VI'}, {'width': 0.4219983664579363, 'from': 'VII', 'to': 'VII'}, {'width': 0.047644976858154095, 'from': 'VII', 'to': 'v'}, {'width': 0.006806425265450586, 'from': 'VII', 'to': 'vii'}, {'width': 0.1429349305744623, 'from': 'III', 'to': 'VI'}, {'width': 0.19738633269806696, 'from': 'III', 'to': 'III'}, {'width': 0.013612850530901171, 'from': 'III', 'to': 'v'}, {'width': 0.17016063163626463, 'from': 'VI', 'to': 'VI'}, {'width': 0.013612850530901171, 'from': 'VI', 'to': 'v'}, {'width': 0.1361285053090117, 'from': 'v', 'to': 'v'}]",
   "height":"700px",
   "width":"1000px",
   "heading":"",
   "html":"<html>\n    <head>\n        <meta charset=\"utf-8\">\n        \n            <script>function neighbourhoodHighlight(params) {\n  // console.log(\"in nieghbourhoodhighlight\");\n  allNodes = nodes.get({ returnType: \"Object\" });\n  // originalNodes = JSON.parse(JSON.stringify(allNodes));\n  // if something is selected:\n  if (params.nodes.length > 0) {\n    highlightActive = true;\n    var i, j;\n    var selectedNode = params.nodes[0];\n    var degrees = 2;\n\n    // mark all nodes as hard to read.\n    for (let nodeId in allNodes) {\n      // nodeColors[nodeId] = allNodes[nodeId].color;\n      allNodes[nodeId].color = \"rgba(200,200,200,0.5)\";\n      if (allNodes[nodeId].hiddenLabel === undefined) {\n        allNodes[nodeId].hiddenLabel = allNodes[nodeId].label;\n        allNodes[nodeId].label = undefined;\n      }\n    }\n    var connectedNodes = network.getConnectedNodes(selectedNode);\n    var allConnectedNodes = [];\n\n    // get the second degree nodes\n    for (i = 1; i < degrees; i++) {\n      for (j = 0; j < connectedNodes.length; j++) {\n        allConnectedNodes = allConnectedNodes.concat(\n          network.getConnectedNodes(connectedNodes[j])\n        );\n      }\n    }\n\n    // all second degree nodes get a different color and their label back\n    for (i = 0; i < allConnectedNodes.length; i++) {\n      // allNodes[allConnectedNodes[i]].color = \"pink\";\n      allNodes[allConnectedNodes[i]].color = \"rgba(150,150,150,0.75)\";\n      if (allNodes[allConnectedNodes[i]].hiddenLabel !== undefined) {\n        allNodes[allConnectedNodes[i]].label =\n          allNodes[allConnectedNodes[i]].hiddenLabel;\n        allNodes[allConnectedNodes[i]].hiddenLabel = undefined;\n      }\n    }\n\n    // all first degree nodes get their own color and their label back\n    for (i = 0; i < connectedNodes.length; i++) {\n      // allNodes[connectedNodes[i]].color = undefined;\n      allNodes[connectedNodes[i]].color = nodeColors[connectedNodes[i]];\n      if (allNodes[connectedNodes[i]].hiddenLabel !== undefined) {\n        allNodes[connectedNodes[i]].label =\n          allNodes[connectedNodes[i]].hiddenLabel;\n        allNodes[connectedNodes[i]].hiddenLabel = undefined;\n      }\n    }\n\n    // the main node gets its own color and its label back.\n    // allNodes[selectedNode].color = undefined;\n    allNodes[selectedNode].color = nodeColors[selectedNode];\n    if (allNodes[selectedNode].hiddenLabel !== undefined) {\n      allNodes[selectedNode].label = allNodes[selectedNode].hiddenLabel;\n      allNodes[selectedNode].hiddenLabel = undefined;\n    }\n  } else if (highlightActive === true) {\n    // console.log(\"highlightActive was true\");\n    // reset all nodes\n    for (let nodeId in allNodes) {\n      // allNodes[nodeId].color = \"purple\";\n      allNodes[nodeId].color = nodeColors[nodeId];\n      // delete allNodes[nodeId].color;\n      if (allNodes[nodeId].hiddenLabel !== undefined) {\n        allNodes[nodeId].label = allNodes[nodeId].hiddenLabel;\n        allNodes[nodeId].hiddenLabel = undefined;\n      }\n    }\n    highlightActive = false;\n  }\n\n  // transform the object into an array\n  var updateArray = [];\n  if (params.nodes.length > 0) {\n    for (let nodeId in allNodes) {\n      if (allNodes.hasOwnProperty(nodeId)) {\n        // console.log(allNodes[nodeId]);\n        updateArray.push(allNodes[nodeId]);\n      }\n    }\n    nodes.update(updateArray);\n  } else {\n    // console.log(\"Nothing was selected\");\n    for (let nodeId in allNodes) {\n      if (allNodes.hasOwnProperty(nodeId)) {\n        // console.log(allNodes[nodeId]);\n        // allNodes[nodeId].color = {};\n        updateArray.push(allNodes[nodeId]);\n      }\n    }\n    nodes.update(updateArray);\n  }\n}\n\nfunction filterHighlight(params) {\n  allNodes = nodes.get({ returnType: \"Object\" });\n  // if something is selected:\n  if (params.nodes.length > 0) {\n    filterActive = true;\n    let selectedNodes = params.nodes;\n\n    // hiding all nodes and saving the label\n    for (let nodeId in allNodes) {\n      allNodes[nodeId].hidden = true;\n      if (allNodes[nodeId].savedLabel === undefined) {\n        allNodes[nodeId].savedLabel = allNodes[nodeId].label;\n        allNodes[nodeId].label = undefined;\n      }\n    }\n\n    for (let i=0; i < selectedNodes.length; i++) {\n      allNodes[selectedNodes[i]].hidden = false;\n      if (allNodes[selectedNodes[i]].savedLabel !== undefined) {\n        allNodes[selectedNodes[i]].label = allNodes[selectedNodes[i]].savedLabel;\n        allNodes[selectedNodes[i]].savedLabel = undefined;\n      }\n    }\n\n  } else if (filterActive === true) {\n    // reset all nodes\n    for (let nodeId in allNodes) {\n      allNodes[nodeId].hidden = false;\n      if (allNodes[nodeId].savedLabel !== undefined) {\n        allNodes[nodeId].label = allNodes[nodeId].savedLabel;\n        allNodes[nodeId].savedLabel = undefined;\n      }\n    }\n    filterActive = false;\n  }\n\n  // transform the object into an array\n  var updateArray = [];\n  if (params.nodes.length > 0) {\n    for (let nodeId in allNodes) {\n      if (allNodes.hasOwnProperty(nodeId)) {\n        updateArray.push(allNodes[nodeId]);\n      }\n    }\n    nodes.update(updateArray);\n  } else {\n    for (let nodeId in allNodes) {\n      if (allNodes.hasOwnProperty(nodeId)) {\n        updateArray.push(allNodes[nodeId]);\n      }\n    }\n    nodes.update(updateArray);\n  }\n}\n\nfunction selectNode(nodes) {\n  network.selectNodes(nodes);\n  neighbourhoodHighlight({ nodes: nodes });\n  return nodes;\n}\n\nfunction selectNodes(nodes) {\n  network.selectNodes(nodes);\n  filterHighlight({nodes: nodes});\n  return nodes;\n}\n\nfunction highlightFilter(filter) {\n  let selectedNodes = []\n  let selectedProp = filter['property']\n  if (filter['item'] === 'node') {\n    let allNodes = nodes.get({ returnType: \"Object\" });\n    for (let nodeId in allNodes) {\n      if (allNodes[nodeId][selectedProp] && filter['value'].includes((allNodes[nodeId][selectedProp]).toString())) {\n        selectedNodes.push(nodeId)\n      }\n    }\n  }\n  else if (filter['item'] === 'edge'){\n    let allEdges = edges.get({returnType: 'object'});\n    // check if the selected property exists for selected edge and select the nodes connected to the edge\n    for (let edge in allEdges) {\n      if (allEdges[edge][selectedProp] && filter['value'].includes((allEdges[edge][selectedProp]).toString())) {\n        selectedNodes.push(allEdges[edge]['from'])\n        selectedNodes.push(allEdges[edge]['to'])\n      }\n    }\n  }\n  selectNodes(selectedNodes)\n}</script>\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/vis-network/9.1.2/dist/dist/vis-network.min.css\" integrity=\"sha512-WgxfT5LWjfszlPHXRmBWHkV2eceiWTOBvrKCNbdgDYTHrT2AeLCGbF4sZlZw3UMN3WtL0tGUoIAKsu8mllg/XA==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\" />\n            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/vis-network/9.1.2/dist/vis-network.min.js\" integrity=\"sha512-LnvoEWDFrqGHlHmDD2101OrLcbsfkrzoSpvtSQtxK3RMnRV0eOkhhBN2dXHKRrUU8p2DGRTk35n4O8nWSVe1mQ==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>\n            \n            \n            \n            \n            \n            \n\n        \n<center>\n<h1></h1>\n</center>\n\n<!-- <link rel=\"stylesheet\" href=\"../node_modules/vis/dist/vis.min.css\" type=\"text/css\" />\n<script type=\"text/javascript\" src=\"../node_modules/vis/dist/vis.js\"> </script>-->\n        <link\n          href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/css/bootstrap.min.css\"\n          rel=\"stylesheet\"\n          integrity=\"sha384-eOJMYsd53ii+scO/bJGFsiCZc+5NDVN2yr8+0RDqr0Ql0h+rP48ckxlpbzKgwra6\"\n          crossorigin=\"anonymous\"\n        />\n        <script\n          src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/js/bootstrap.bundle.min.js\"\n          integrity=\"sha384-JEW9xMcG8R+pH31jmWH6WWP0WintQrMb4s7ZOdauHnUtxwoG2vI5DkLtS3qm9Ekf\"\n          crossorigin=\"anonymous\"\n        ></script>\n\n\n        <center>\n          <h1></h1>\n        </center>\n        <style type=\"text/css\">\n\n             #mynetwork {\n                 width: 1000px;\n                 height: 700px;\n                 background-color: #fdf2f8;\n                 border: 1px solid lightgray;\n                 position: relative;\n                 float: left;\n             }\n\n             \n\n             \n\n             \n        </style>\n    </head>\n\n\n    <body>\n        <div class=\"card\" style=\"width: 100%\">\n            \n            \n            <div id=\"mynetwork\" class=\"card-body\"></div>\n        </div>\n\n        \n        \n\n        <script type=\"text/javascript\">\n\n              // initialize global variables.\n              var edges;\n              var nodes;\n              var allNodes;\n              var allEdges;\n              var nodeColors;\n              var originalNodes;\n              var network;\n              var container;\n              var options, data;\n              var filter = {\n                  item : '',\n                  property : '',\n                  value : []\n              };\n\n              \n\n              \n\n              // This method is responsible for drawing the graph, returns the drawn network\n              function drawGraph() {\n                  var container = document.getElementById('mynetwork');\n\n                  \n\n                  // parsing and collecting nodes and edges from the python\n                  nodes = new vis.DataSet([{\"font\": {\"color\": \"#811a48\"}, \"group\": \"0\", \"id\": \"I\", \"label\": \"I\", \"shape\": \"dot\", \"size\": 14}, {\"font\": {\"color\": \"#811a48\"}, \"group\": \"0\", \"id\": \"V\", \"label\": \"V\", \"shape\": \"dot\", \"size\": 15}, {\"font\": {\"color\": \"#811a48\"}, \"group\": \"0\", \"id\": \"ii\", \"label\": \"ii\", \"shape\": \"dot\", \"size\": 14}, {\"font\": {\"color\": \"#811a48\"}, \"group\": \"0\", \"id\": \"vi\", \"label\": \"vi\", \"shape\": \"dot\", \"size\": 13}, {\"font\": {\"color\": \"#811a48\"}, \"group\": \"1\", \"id\": \"II\", \"label\": \"II\", \"shape\": \"dot\", \"size\": 14}, {\"font\": {\"color\": \"#811a48\"}, \"group\": \"0\", \"id\": \"IV\", \"label\": \"IV\", \"shape\": \"dot\", \"size\": 15}, {\"font\": {\"color\": \"#811a48\"}, \"group\": \"1\", \"id\": \"VII\", \"label\": \"VII\", \"shape\": \"dot\", \"size\": 14}, {\"font\": {\"color\": \"#811a48\"}, \"group\": \"1\", \"id\": \"v\", \"label\": \"v\", \"shape\": \"dot\", \"size\": 13}, {\"font\": {\"color\": \"#811a48\"}, \"group\": \"1\", \"id\": \"III\", \"label\": \"III\", \"shape\": \"dot\", \"size\": 14}, {\"font\": {\"color\": \"#811a48\"}, \"group\": \"1\", \"id\": \"VI\", \"label\": \"VI\", \"shape\": \"dot\", \"size\": 14}, {\"font\": {\"color\": \"#811a48\"}, \"group\": \"1\", \"id\": \"iv\", \"label\": \"iv\", \"shape\": \"dot\", \"size\": 11}, {\"font\": {\"color\": \"#811a48\"}, \"group\": \"0\", \"id\": \"iii\", \"label\": \"iii\", \"shape\": \"dot\", \"size\": 10}, {\"font\": {\"color\": \"#811a48\"}, \"group\": \"1\", \"id\": \"i\", \"label\": \"i\", \"shape\": \"dot\", \"size\": 12}, {\"font\": {\"color\": \"#811a48\"}, \"group\": \"0\", \"id\": \"vii\", \"label\": \"vii\", \"shape\": \"dot\", \"size\": 7}]);\n                  edges = new vis.DataSet([{\"from\": \"I\", \"to\": \"V\", \"width\": 25.0}, {\"from\": \"I\", \"to\": \"ii\", \"width\": 0.5921589980942009}, {\"from\": \"I\", \"to\": \"I\", \"width\": 13.054723659134224}, {\"from\": \"I\", \"to\": \"vi\", \"width\": 2.266539613395045}, {\"from\": \"I\", \"to\": \"II\", \"width\": 0.04083855159270351}, {\"from\": \"I\", \"to\": \"IV\", \"width\": 8.35829022597332}, {\"from\": \"I\", \"to\": \"VII\", \"width\": 0.5989654233596515}, {\"from\": \"I\", \"to\": \"v\", \"width\": 0.054451402123604685}, {\"from\": \"I\", \"to\": \"III\", \"width\": 0.04083855159270351}, {\"from\": \"I\", \"to\": \"VI\", \"width\": 0.020419275796351756}, {\"from\": \"I\", \"to\": \"iv\", \"width\": 0.04083855159270351}, {\"from\": \"I\", \"to\": \"iii\", \"width\": 0.03403212632725292}, {\"from\": \"I\", \"to\": \"i\", \"width\": 0.013612850530901171}, {\"from\": \"V\", \"to\": \"ii\", \"width\": 0.5377075959705963}, {\"from\": \"V\", \"to\": \"iii\", \"width\": 0.061257827389055275}, {\"from\": \"V\", \"to\": \"II\", \"width\": 1.0754151919411925}, {\"from\": \"V\", \"to\": \"IV\", \"width\": 4.478627824666486}, {\"from\": \"V\", \"to\": \"i\", \"width\": 1.0345766403484888}, {\"from\": \"V\", \"to\": \"iv\", \"width\": 0.03403212632725292}, {\"from\": \"V\", \"to\": \"V\", \"width\": 3.7231146202014704}, {\"from\": \"V\", \"to\": \"vi\", \"width\": 1.3000272257010619}, {\"from\": \"V\", \"to\": \"III\", \"width\": 0.047644976858154095}, {\"from\": \"V\", \"to\": \"VII\", \"width\": 0.1837734821671658}, {\"from\": \"V\", \"to\": \"VI\", \"width\": 0.08167710318540702}, {\"from\": \"V\", \"to\": \"v\", \"width\": 0.006806425265450586}, {\"from\": \"V\", \"to\": \"vii\", \"width\": 0.006806425265450586}, {\"from\": \"ii\", \"to\": \"vi\", \"width\": 0.29948271167982576}, {\"from\": \"ii\", \"to\": \"IV\", \"width\": 0.1293220800435611}, {\"from\": \"ii\", \"to\": \"II\", \"width\": 0.15654778110536346}, {\"from\": \"ii\", \"to\": \"ii\", \"width\": 0.6806425265450585}, {\"from\": \"ii\", \"to\": \"v\", \"width\": 0.04083855159270351}, {\"from\": \"ii\", \"to\": \"VI\", \"width\": 0.020419275796351756}, {\"from\": \"ii\", \"to\": \"III\", \"width\": 0.020419275796351756}, {\"from\": \"ii\", \"to\": \"iii\", \"width\": 0.013612850530901171}, {\"from\": \"ii\", \"to\": \"VII\", \"width\": 0.013612850530901171}, {\"from\": \"ii\", \"to\": \"i\", \"width\": 0.013612850530901171}, {\"from\": \"ii\", \"to\": \"vii\", \"width\": 0.006806425265450586}, {\"from\": \"iii\", \"to\": \"vi\", \"width\": 0.34032126327252926}, {\"from\": \"iii\", \"to\": \"IV\", \"width\": 0.006806425265450586}, {\"from\": \"iii\", \"to\": \"II\", \"width\": 0.020419275796351756}, {\"from\": \"iii\", \"to\": \"VII\", \"width\": 0.013612850530901171}, {\"from\": \"iii\", \"to\": \"VI\", \"width\": 0.020419275796351756}, {\"from\": \"iii\", \"to\": \"III\", \"width\": 0.006806425265450586}, {\"from\": \"iii\", \"to\": \"vii\", \"width\": 0.006806425265450586}, {\"from\": \"vi\", \"to\": \"II\", \"width\": 0.04083855159270351}, {\"from\": \"vi\", \"to\": \"III\", \"width\": 0.5649332970323986}, {\"from\": \"vi\", \"to\": \"vi\", \"width\": 0.46964334331609037}, {\"from\": \"vi\", \"to\": \"IV\", \"width\": 0.3335148380070787}, {\"from\": \"vi\", \"to\": \"VI\", \"width\": 0.020419275796351756}, {\"from\": \"vi\", \"to\": \"iv\", \"width\": 0.027225701061802342}, {\"from\": \"vi\", \"to\": \"VII\", \"width\": 0.020419275796351756}, {\"from\": \"vi\", \"to\": \"v\", \"width\": 0.006806425265450586}, {\"from\": \"II\", \"to\": \"iv\", \"width\": 0.013612850530901171}, {\"from\": \"II\", \"to\": \"v\", \"width\": 0.04083855159270351}, {\"from\": \"II\", \"to\": \"II\", \"width\": 0.2654505853525728}, {\"from\": \"II\", \"to\": \"i\", \"width\": 0.047644976858154095}, {\"from\": \"II\", \"to\": \"IV\", \"width\": 0.013612850530901171}, {\"from\": \"II\", \"to\": \"VI\", \"width\": 0.047644976858154095}, {\"from\": \"II\", \"to\": \"III\", \"width\": 0.013612850530901171}, {\"from\": \"II\", \"to\": \"vii\", \"width\": 0.006806425265450586}, {\"from\": \"IV\", \"to\": \"VII\", \"width\": 0.5036754696433433}, {\"from\": \"IV\", \"to\": \"IV\", \"width\": 1.0277702150830383}, {\"from\": \"IV\", \"to\": \"III\", \"width\": 0.10209637898175877}, {\"from\": \"IV\", \"to\": \"v\", \"width\": 0.08848352845085762}, {\"from\": \"IV\", \"to\": \"VI\", \"width\": 0.006806425265450586}, {\"from\": \"IV\", \"to\": \"i\", \"width\": 0.03403212632725292}, {\"from\": \"IV\", \"to\": \"iv\", \"width\": 0.006806425265450586}, {\"from\": \"IV\", \"to\": \"vii\", \"width\": 0.006806425265450586}, {\"from\": \"i\", \"to\": \"iv\", \"width\": 0.19738633269806696}, {\"from\": \"i\", \"to\": \"i\", \"width\": 1.4838007078682276}, {\"from\": \"i\", \"to\": \"VII\", \"width\": 1.1707051456575006}, {\"from\": \"i\", \"to\": \"III\", \"width\": 0.11570922951265995}, {\"from\": \"i\", \"to\": \"v\", \"width\": 0.4288047917233868}, {\"from\": \"i\", \"to\": \"VI\", \"width\": 0.020419275796351756}, {\"from\": \"iv\", \"to\": \"VII\", \"width\": 0.07487067791995644}, {\"from\": \"iv\", \"to\": \"VI\", \"width\": 0.006806425265450586}, {\"from\": \"iv\", \"to\": \"v\", \"width\": 0.006806425265450586}, {\"from\": \"iv\", \"to\": \"III\", \"width\": 0.054451402123604685}, {\"from\": \"iv\", \"to\": \"vii\", \"width\": 0.006806425265450586}, {\"from\": \"VII\", \"to\": \"III\", \"width\": 0.6193846991560032}, {\"from\": \"VII\", \"to\": \"VI\", \"width\": 0.07487067791995644}, {\"from\": \"VII\", \"to\": \"VII\", \"width\": 0.4219983664579363}, {\"from\": \"VII\", \"to\": \"v\", \"width\": 0.047644976858154095}, {\"from\": \"VII\", \"to\": \"vii\", \"width\": 0.006806425265450586}, {\"from\": \"III\", \"to\": \"VI\", \"width\": 0.1429349305744623}, {\"from\": \"III\", \"to\": \"III\", \"width\": 0.19738633269806696}, {\"from\": \"III\", \"to\": \"v\", \"width\": 0.013612850530901171}, {\"from\": \"VI\", \"to\": \"VI\", \"width\": 0.17016063163626463}, {\"from\": \"VI\", \"to\": \"v\", \"width\": 0.013612850530901171}, {\"from\": \"v\", \"to\": \"v\", \"width\": 0.1361285053090117}]);\n\n                  nodeColors = {};\n                  allNodes = nodes.get({ returnType: \"Object\" });\n                  for (nodeId in allNodes) {\n                    nodeColors[nodeId] = allNodes[nodeId].color;\n                  }\n                  allEdges = edges.get({ returnType: \"Object\" });\n                  // adding nodes and edges to the graph\n                  data = {nodes: nodes, edges: edges};\n\n                  var options = {\"physics\": {\"repulsion\": {\"springLength\": 330, \"springConstant\": 0.235, \"nodeDistance\": 320}, \"minVelocity\": 0.75, \"solver\": \"repulsion\"}};\n\n                  \n\n\n                  \n\n                  network = new vis.Network(container, data, options);\n\n                  \n\n                  \n\n                  \n\n\n                  \n\n                  return network;\n\n              }\n              drawGraph();\n        </script>\n    </body>\n</html>",
   "shape":"dot",
   "font_color":"#811a48",
   "directed":false,
   "bgcolor":"#fdf2f8",
   "use_DOT":false,
   "dot_lang":"",
   "options":"{'physics': {'repulsion': {'springLength': 330, 'springConstant': 0.235, 'nodeDistance': 320}, 'minVelocity': 0.75, 'solver': 'repulsion'}}",
   "widget":false,
   "node_ids":"['I', 'V', 'ii', 'vi', 'II', 'IV', 'VII', 'v', 'III', 'VI', 'iv', 'iii', 'i', 'vii']",
   "node_map":"{'I': {'size': 14, 'group': '0', 'id': 'I', 'label': 'I', 'shape': 'dot', 'font': {'color': '#811a48'}}, 'V': {'size': 15, 'group': '0', 'id': 'V', 'label': 'V', 'shape': 'dot', 'font': {'color': '#811a48'}}, 'ii': {'size': 14, 'group': '0', 'id': 'ii', 'label': 'ii', 'shape': 'dot', 'font': {'color': '#811a48'}}, 'vi': {'size': 13, 'group': '0', 'id': 'vi', 'label': 'vi', 'shape': 'dot', 'font': {'color': '#811a48'}}, 'II': {'size': 14, 'group': '1', 'id': 'II', 'label': 'II', 'shape': 'dot', 'font': {'color': '#811a48'}}, 'IV': {'size': 15, 'group': '0', 'id': 'IV', 'label': 'IV', 'shape': 'dot', 'font': {'color': '#811a48'}}, 'VII': {'size': 14, 'group': '1', 'id': 'VII', 'label': 'VII', 'shape': 'dot', 'font': {'color': '#811a48'}}, 'v': {'size': 13, 'group': '1', 'id': 'v', 'label': 'v', 'shape': 'dot', 'font': {'color': '#811a48'}}, 'III': {'size': 14, 'group': '1', 'id': 'III', 'label': 'III', 'shape': 'dot', 'font': {'color': '#811a48'}}, 'VI': {'size': 14, 'group': '1', 'id': 'VI', 'label': 'VI', 'shape': 'dot', 'font': {'color': '#811a48'}}, 'iv': {'size': 11, 'group': '1', 'id': 'iv', 'label': 'iv', 'shape': 'dot', 'font': {'color': '#811a48'}}, 'iii': {'size': 10, 'group': '0', 'id': 'iii', 'label': 'iii', 'shape': 'dot', 'font': {'color': '#811a48'}}, 'i': {'size': 12, 'group': '1', 'id': 'i', 'label': 'i', 'shape': 'dot', 'font': {'color': '#811a48'}}, 'vii': {'size': 7, 'group': '0', 'id': 'vii', 'label': 'vii', 'shape': 'dot', 'font': {'color': '#811a48'}}}",
   "template":"<Template 'template.html'>",
   "conf":false,
   "neighborhood_highlight":false,
   "select_menu":false,
   "filter_menu":false,
   "path":"template.html",
   "template_dir":"/usr/local/lib/python3.8/dist-packages/pyvis/templates/",
   "templateEnv":"<jinja2.environment.Environment object at 0x7f3086ec5190>",
   "cdn_resources":"remote"
}