---
import Layout from "../layouts/Layout.astro";
import InputFieldsComp from "../components/InputFields.astro";
const keys = ['A','B','C','D', 'E', 'F', 'G' ]
const meter = []

---

<Layout title="Teacher View">
    
    <section class="main-container flex flex-col justify-items-center mx-auto max-w-screen-md">
        <div class="grid justify-items-center ">
            <div class="rounded-t-lg bg-slate-700 px-6">
                <h2 class="text-3xl text-persian-pink-400">Teacher Mode</h2>
            </div>
        </div>
        
        <InputFieldsComp />

        
        <div id="interactive-buttons" class="flex ">
            <button id="play-button" class="bg-persian-pink-500 hover:bg-persian-pink-700 text-white font-bold py-2 px-4 border bg-persian-pink-800 rounded">
                Play
            </button>
            <button id="pause-button" class="bg-persian-pink-500 hover:bg-persian-pink-700 text-white font-bold py-2 px-4 border bg-persian-pink-800 rounded">
                Pause
            </button>
        </div>
        <div id="music-fields" class="flex grid grid-cols-1 w-full">
            <div class="pl-4 pt-2">
                <label class="text-persian-pink-50">Input Area:</label>
            </div>
            <div id="abc-text-area" class="">
                <textarea id="notation-input" cols="100" rows="12" spellcheck="false" class="w-full h-full"></textarea>
            </div>
            <div class="pl-4 pt-2 pb-2">
                <label class="text-persian-pink-50">Music Sheet:</label>
            </div>
            <div id="notation" class="overflow-x-auto bg-persian-pink-100 rounded-sm">
            </div>
        </div>
        <div>
            <div id="warnings" class="text-persian-pink-50"></div>

        </div>
    </section>

    <script client:load>
        const svg = document.querySelector("#notation svg");
        if (svg) {
            svg.classList.add("w-full");
            console.log("SVG found!!!")
        }
        else{
            console.log("No SVG found :/")
        }

    </script>

    <script >
        import {generateExercise} from "../scripts/exerciseManager"
        import {Player} from "../scripts/exercisePlayer"

        let myPlayer = new Player()

        const textarea = document.querySelector("textarea");
        const maxHeight = 400; // specify the maximum height in pixels
        
        const setTextAreaHeight = ()=>{
            textarea.style.height = "auto";
            textarea.style.height = Math.min(textarea.scrollHeight, maxHeight) + "px";
        }

        myPlayer.setNewEditor('notation-input','notation','warnings')

        textarea.addEventListener("input",setTextAreaHeight);

        function getSelectedValues() {
            // Get selected meter
            let meter = document.querySelector('input[name="meter-radio"]:checked').nextElementSibling.innerHTML;
            
            // Get selected mode
            let mode = document.querySelector('input[name="default-radio"]:checked').nextElementSibling.innerHTML;
            
            // Get selected key
            let keySelect = document.getElementById("keys");
            let key = keySelect.options[keySelect.selectedIndex].value;
            
            // Check if key is selected
            if (key === "Choose Key") {
                alert("Please select a key.");
                return;
            }
            
            return { meter, mode, key };
        }

        const generateButton = document.querySelector("#generate-button");
        generateButton.addEventListener("click", async ()=>{
            console.log("generating exercise!")
            myPlayer.pauseTune()
            let selectedValues = getSelectedValues();
            if (selectedValues === undefined) {
                console.log("No key selected");
                return;
            }
            let new_song = await generateExercise(selectedValues)
            const notation = document.querySelector('#notation');
            myPlayer = new Player()
            myPlayer.renderAbcSong(notation,new_song)
            
            const notationInput = document.querySelector('#notation-input');
            notationInput.value = new_song;
            setTextAreaHeight()
            console.log("rendered song")

            
        });

        const notationInput = document.querySelector('#notation-input');
        notationInput.addEventListener('input', () => {
            //const notation = document.querySelector('#notation');
            //console.log('notation input change!!!!!!!!!!!!!!')
            //console.log(notationInput.value)
            //renderAbcSong(notation, notationInput.value);
            setTextAreaHeight()
        });

        
        const playButton = document.querySelector("#play-button");
        playButton.addEventListener("click",() => {
            console.log("play clicked!")
            myPlayer.playTune() 
        });
        const pauseButton = document.querySelector("#pause-button");
        pauseButton.addEventListener("click",() =>{
            console.log("pause clicked!")    
            myPlayer.pauseTune() 
        });

        
    </script>
</Layout>


<style>


    #interactive-buttons{
        @apply bg-slate-600 rounded-md pl-4 pt-2 pb-2 my-5;

    }

    #interactive-buttons > button { 
      
        @apply border-persian-pink-300 bg-slate-700  text-persian-pink-50 hover:text-persian-pink-400  py-2 px-4 border-2 hover:border-persian-pink-400/80  rounded-lg;
    }
    
    #notation-input{
        @apply bg-persian-pink-50
    }


    #abc-text-area{
        padding-block: 1em;
        padding-left: 1em;
        padding-right: 1em;
        @apply bg-slate-600 rounded-md;
        
    }


    #music-fields{
        @apply bg-slate-600 rounded-md;
    }

</style>